-- PatternCheckGame_Ctrl

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity PATTERNCHECKGAME_CTRL is
    port
    (
        CLK         : in    std_logic;                           -- clock
        RESET       : in    std_logic;                           -- reset
        PATTERN     : in    std_logic_vector(3 downto 0);        -- Pattern generated by Pattern generator 
        TIMEOVER    : in    std_logic;                           -- Signal from levelTimer that time is over
        KEY1        : in    std_logic;                           -- key 1. positive logic (1-pressed)
        KEY2        : in    std_logic;                           -- key 2, positive logic (1-pressed)
        TIMERSTART  : out   std_logic;                           -- Command to start the levelTimer 
        LEVEL       : out   unsigned(3 downto 0);                -- level reached by the player, between 1 and 5
        PATT_RED    : out   std_logic_vector(3 downto 0);        -- Pattern shown on red LEDs 
        PATT_GREEN  : out   std_logic_vector(3 downto 0);        -- Pattern shown on green LEDs
        KEYNO       : out   unsigned(3 downto 0);                -- key to be pressed in current game phase
        NEXTPATTERN : out   std_logic;                           -- requirement of new Pattern
        MODEPATTERN : out   std_logic;                           -- mode for pattern (0 in phase 1, 1 in phase 2 of a round)
        ROUNDDISP   : out   unsigned(3 downto 0)                 -- round display
    );
end PATTERNCHECKGAME_CTRL;

architecture BEHAVE of PATTERNCHECKGAME_CTRL is
begin
-- this code should normally be overwritten by STDE, our XFSA drawing tool.
-- the following is only inserted to allow archiving      
                    TIMERSTART  <= '0';
                    LEVEL       <= to_unsigned(0,4);
                    PATT_RED    <= PATTERN;
                    PATT_GREEN  <= PATTERN;
                    KEYNO       <= to_unsigned(1,4);
                    NEXTPATTERN <= '0';
                    MODEPATTERN <= '0';
                    ROUNDDISP   <= to_unsigned(1,4);
end BEHAVE;
